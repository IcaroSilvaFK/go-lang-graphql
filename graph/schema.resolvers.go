package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/IcaroSilvaFK/go-graphql/graph/model"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	courses, err := r.CourseDB.FindByCategoryId(obj.ID)

	if err != nil {
		return nil, err
	}

	var coursesModel []*model.Course

	for _, c := range courses {
		coursesModel = append(coursesModel, &model.Course{
			ID:          c.ID,
			Name:        &c.Name,
			Description: &c.Description,
		})
	}

	return coursesModel, nil
}

// Category is the resolver for the category field.
func (r *courseResolver) Category(ctx context.Context, obj *model.Course) (*model.Category, error) {

	cat, err := r.CategoryDB.FindByCourseId(obj.ID)

	if err != nil {
		return nil, err
	}

	return &model.Category{
		ID:          cat.ID,
		Name:        cat.Name,
		Description: &cat.Description,
	}, nil

}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	cat, err := r.CategoryDB.CreateCategory(input.Name, *input.Description)

	if err != nil {
		return nil, err
	}

	return &model.Category{
		ID:          cat.ID,
		Name:        cat.Name,
		Description: &cat.Description,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	c, err := r.CourseDB.CreateCourse(input.Name, *input.Description, input.CategoryID)

	if err != nil {
		return nil, err
	}

	return &model.Course{
		ID:          c.ID,
		Name:        &c.Name,
		Description: &c.Description,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	cats, err := r.CategoryDB.FindAll()

	if err != nil {
		return nil, err
	}

	var result []*model.Category

	for _, cat := range cats {
		result = append(result, &model.Category{
			ID:          cat.ID,
			Name:        cat.Name,
			Description: &cat.Description,
		})
	}

	return result, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CourseDB.ListAll()

	if err != nil {
		return nil, err
	}

	var result []*model.Course

	for _, c := range courses {
		result = append(result, &model.Course{
			ID:          c.ID,
			Name:        &c.Name,
			Description: &c.Description,
		})
	}

	return result, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
